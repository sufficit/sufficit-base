using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Sufficit
{
    public class ProvedorParametros : DDictionary<string, string>
    {
        public static implicit operator ProvedorParametros(string Argumentos)
        {
            ProvedorParametros resultado = new ProvedorParametros();
            if (!string.IsNullOrWhiteSpace(Argumentos))
            {
                string[] pairs = Argumentos.Split(';');
                foreach (string item in pairs)
                {
                    string chave = item.Split('=')[0].ToLowerInvariant().Trim();
                    resultado[chave] = item.Split('=')[1];
                }
            }
            return resultado;
        }

        public override string ToString()
        {
            var resultado = string.Empty;
            foreach (string key in this.Keys)
            {
                if (!string.IsNullOrWhiteSpace(key)) { 
                    string chave = key.ToLowerInvariant().Trim();
                    resultado += string.Format("{0}={1};", chave, this[key]);
                }
            }
            return resultado;
        }

        public override int GetHashCode()
        {
            return this.ToString().GetHashCode();
        }

        public override bool Equals(object obj)
        {
            return this.ToString().Equals(obj != null ? obj.ToString() : string.Empty);
        }

        #region CONSTRUTORES 

        public ProvedorParametros() { }

        public ProvedorParametros(IDictionary Parametros)
        {
            if (Parametros == null) return;
            foreach (object key in Parametros.Keys)
            {
                if (Parametros[key] != null)
                {
                    string chave = key.ToString().ToLowerInvariant().Trim();
                    this[chave] = Parametros[key].ToString();
                }
            }
        }

        #endregion

        private const string pAutoInsert = "autoinsert";
        private const string pIDInstancia = "id";

        /// <summary>
        /// Gatilho para evitar que esta instância de provedor seja inserido automáticamente na lista de servidores públicos
        /// </summary>
        public bool AutoInsert
        {
            set 
            {
                if (bool.TryParse(value.ToString(), out bool _item))
                {
                    this[pAutoInsert] = _item.ToString();
                }
            }

            get
            {
                if (bool.TryParse(this[pAutoInsert], out bool _item))
                    return _item;
                else return true;
            }
        }

        public Guid ID
        {
            set
            {
                if (Guid.TryParse(value.ToString(), out Guid _item))
                {
                    this[pIDInstancia] = _item.ToString();
                }
            }

            get
            {
                if (Guid.TryParse(this[pIDInstancia], out Guid _item))
                    return _item;
                else return Guid.Empty;
            }
        }
    }
}
